Mind Map generated by NB MindMap plugin
> __version__=`1.1`,showJumps=`true`
---

# Unity Scripting Learning Path
> collapsed=`true`


## Project Prototypes
> collapsed=`true`


### Five prototypes
> collapsed=`true`


#### 1\. Driving Simulator
> collapsed=`true`


##### A vehicle

##### A road

##### Obstacles

##### Camera is placed behind vehicle

##### Player input

#### 2\. Feed the Animals
> collapsed=`true`


##### Collisions

##### Prefab Spawner

#### 3\. Infinite Runner
> collapsed=`true`


##### Music

##### Sound effets

##### Particle effects

#### 4\. Gameplay Mechanics
> collapsed=`true`


##### Power ups

##### Difficulty

##### Player control
> collapsed=`true`


###### Rotate camera
> collapsed=`true`


####### Empty game object as the focal point

#### 5\. Food Ninja
> collapsed=`true`


##### User interface

##### Mouse Events
> collapsed=`true`


###### onMouseEnter

###### onMouseDown

###### onMouseClick

##### Randomized variables
> collapsed=`true`


###### Position

###### Force

###### Torque

### Break down concepts

## Personal Prototype
> collapsed=`true`,leftSide=`true`


### Design

### Plan
> leftSide=`true`


### Build
> leftSide=`true`


## Unity Certified User Programmer
> collapsed=`true`,leftSide=`true`


### Official Unity Certificate

## Advice
> collapsed=`true`


### Watch, then do

### Performance Techniques
> collapsed=`true`


#### Object Pooling
> collapsed=`true`


##### Instead of creating/destroying objects, you can create and reuse objects

### You can provide power ups to help when you increase difficulty

## Gameplay Concepts
> collapsed=`true`


### Player Control
> collapsed=`true`


#### Input
> collapsed=`true`


##### Input Manager

##### Mouse

##### Keyboard

##### Gamepad

#### Player abilities

#### Basic Movement

#### Basic Controls

#### Basic Gameplay

#### Typical scripts used to give player control are called "Controller"

### Environment

### Perspective
> collapsed=`true`


#### Side view

#### Top\-down view

#### Third person view

#### First person view

### Physics
> collapsed=`true`


#### Transform

#### RigidBody

#### AddForce

#### Vector
> collapsed=`true`


##### Distance

##### Direction

#### Force

#### Torque

### Prefabs
> collapsed=`true`


#### Reuse

#### Customize all instances at once

#### Sprites

### Colliders
> collapsed=`true`


#### Mesh colliders
> collapsed=`true`


##### Game world are often a mesh

##### Can be disabled for things that need to ignore the game world

#### Box colliders
> collapsed=`true`


##### Require rigidbodies to detect physics

### Randomness

### Game world
> collapsed=`true`


#### Non\-player characters \(NPC\)

#### Environment

### Increasing Difficulty

### Powerups

### User Interface
> collapsed=`true`


#### Let player know how they are progressing

#### State transitions
> collapsed=`true`


##### GameManager

## Unity Editor
> collapsed=`true`


### Scene View
> collapsed=`true`


#### X, Y, Z coordinates

#### Like a movie set

### Game View
> collapsed=`true`


#### Seen through camera

### Tools
> collapsed=`true`


#### Move camera to current scene view
> collapsed=`true`


##### Ctrl \+ Shift \+ F

#### Focus current selection
> collapsed=`true`


##### F

#### Rotate around object
> collapsed=`true`


##### Alt \+ hold left mouse

#### Zoom in or out of object
> collapsed=`true`


##### Alt \+ hold right mouse

#### Undo
> collapsed=`true`


##### Ctrl \+ Z

#### Play mode
> collapsed=`true`


##### Ctrl \+ P

#### Duplicate
> collapsed=`true`


##### Ctrl \+ D

### Hierarchy

## Scripting
> collapsed=`true`,leftSide=`true`


### MonoBehaviour
> collapsed=`true`


#### Awake

#### Start
> collapsed=`true`


##### Run when scene plays

#### Update
> collapsed=`true`


##### Runs every frame

#### FixedUpdate

#### LateUpdate
> collapsed=`true`


##### Useful for when the camera follows the player

### Common Operations on Game Objects
> collapsed=`true`


#### OnMouseUp

#### OnMouseDown

#### OnTriggerEnter

#### OnTriggerLeave

### Timing
> collapsed=`true`


#### time\.deltaTime

### C\#
> collapsed=`true`


#### Allman bracket style

## Cinemachine
> collapsed=`true`,leftSide=`true`


### Components
> collapsed=`true`


#### Cinemachine Brain
> collapsed=`true`


##### Add to main camera

#### Virtual Camera

#### Frame Guidelines
> collapsed=`true`


##### Dead zone

##### Soft zone

#### Track

#### Dolly

## AnimationController
> leftSide=`true`


## Career
> collapsed=`true`


### Real time creator
> collapsed=`true`


#### game dev

#### film

#### animation

#### architecture

#### modeling

#### automotive

#### construction

#### medical

#### education

### opportunities
> collapsed=`true`


#### two broad categories
> collapsed=`true`


##### Art & design

##### Programming

### Unity certifications
> collapsed=`true`


#### Certified User
> collapsed=`true`


##### Programmer

##### Artist

##### VR development

#### Certified Associate
> collapsed=`true`


##### Game Developer

##### Programmer

##### Artist

#### Certified Professional
> collapsed=`true`


##### Programmer

##### Artist

#### Certified Expert
> collapsed=`true`


##### Programmer

##### Technical Artist in Shading & Effects

##### Technical Artist in Rigging & Animation

### Portfolios
> collapsed=`true`


#### Behance
> collapsed=`true`


##### https://www\.behance\.net/

#### ArtStation
> collapsed=`true`


##### https://www\.artstation\.com/?sort\_by=community

#### SketchFAB
> collapsed=`true`


##### https://sketchfab\.com/

#### itch\.io

## Script Optimization
> collapsed=`true`,leftSide=`true`


### Programmer algorithmn
> collapsed=`true`


#### Write for readability

#### Profile code
> leftSide=`true`


#### Only if profile shows impactful issues, should you optimize
> leftSide=`true`


### Tips
> collapsed=`true`


#### Experience will let you preoptimize

#### Don't wastefully preoptimize

#### Hierarchy view in Unity Profiler is very useful \(vs the timeline view\)

#### Memory and CPU are usually what is effected by problematic scripts

#### Avoid the Update function, if possible
> collapsed=`true`


##### e\.g\. Do something every 1 second can be accomplished using InvokeRepeating or a Coroutine

#### Caching
> collapsed=`true`


##### You may be able to put expensive operations in Start instead of Update

#### Use sqrMagnitude when comparing distances

#### Always cache references to Camera\.main

#### Always cache a reference to transform

### Unity Profiler
> collapsed=`true`


#### Ctrl \+ 7

#### Window \> Analysis \> Profiler

#### Profiler window
> collapsed=`true`


##### Profiler modules
> collapsed=`true`


###### CPU

###### Rendering

###### Memory

### Object Pooling
> collapsed=`true`


#### Technique where objects are instantiated and reused \(instead of destroyed\)

#### All instances are created at once, and use SetActive\(true/false\) to enable or disable

## Programming Systems and Architecture

### Intermediate Scripting

#### Creating properties

#### Ternary Operator

#### Statics

#### Method Overloading

#### Generics

#### Inheritance

#### Polymorphism

#### Member Hiding

#### Overriding

#### Interfaces

##### Add a list of interfaces after the inheritance

##### Classes can only inherit from one parent class but can have many interfaces

##### Guarantees contracts across numerous classes that may or may not be related

##### C\# convention says interface names typically start with an "I" \(e\.g\. IEnumerator\)

#### Extension Methods

#### Namespaces

#### Lists

##### using System\.Collections\.Generic

##### To sort, one must implement the IComparable\<T\> interface in the class

#### Dictionaries

##### Dictionary\<T, U\> name = new Dictionary\<T, U\>\(\);

#### Coroutines

##### "Can be thought of as functions that execute in intervals"

##### Coroutines are evaluated before Updates

##### Coroutine functions must implement IEnumerator interface

##### Good for avoiding polling for updates

###### Can implement movement without a Update function

#### Quaternions

##### x, y, z, w

##### vs\. Euler Angles

###### What is shown in the inspector

###### NOT Quaternions

##### Static functions

###### LookRotation

####### Quaternion\.LookRotation\(Vector3 relativePosition\)

####### Quaternion\.LookRotation\(Vector3 relativePosition, Vector3 whichDirectionIsUp\)

###### Slerp

####### Quaternion\.Slerp\(Quaternion currentRotation, Quaternion desiredRotation, float timeToGetThere\)

###### Identity

####### Basically zeroed out \(if thinking in Euler Angles\)

#### Delegates

##### Like variables, but contain functions

###### C\#'s implementation of lambda?

##### delegate \<function signature\>

###### delegate void MyFooBar\(int param1, string param2, float param3\);

##### Allows for multicasting

###### Simultaneously call many functions with one invocation

#### Attributes

##### Can make things show in up the inspector using attributes

###### \[SerializableField\]

###### \[Range\(\-100, 100\)\] public int speed = 0;

###### \[ExecuteInEditMode\]

#### Events

##### Specialized delegates

##### Pub/sub broadcast system

##### "Event manager script"

##### Rule of thumb: when you subscribe, you should also have a corresponding unsubscribe

### The Observer Pattern

#### The observer design pattern

#### The publish/subscribe design pattern

#### Observer Demo Project

##### Limit ability to shoot to one projectile at a time

###### Possible Solutions

####### Direct Object Call

######## Tight Coupling between classes

######## Not easily scalable

######## Complicates unit testing

####### Delegates and Events

######## Loose coupling

######## pub/sub

#### Tips

##### The GameSceneController is used for total points because it lives for the duration of the game

#### C\# action is another type of delegate event

#### Subject

##### Keeps list of observers

##### notifies list of observers when an event occurs

#### Observers

##### Implement an interface so the subject knows how to call it

### The Publisher Subscriber Pattern

#### Like the observer pattern but it also has a Broker

#### Broker

##### Maintains list of subscribers

##### Add/Remove subscribers

##### Notify subscribers

#### Publisher

##### Notify broker when something noteworthy happens

#### Subscriber

### The Command Pattern

#### When to use

##### Needing to create a rewind system

##### When you command units

#### Records player actions

#### Interface: Execute, Undo

### Singleton Pattern

#### Single instance is ever created

#### Great for meta classes, like XManager

## User Interfaces
> collapsed=`true`,leftSide=`true`


### Interface Types
> collapsed=`true`


#### Diegetic
> collapsed=`true`


##### UI is inside the game world
> collapsed=`true`


###### Save point

#### Spatial
> collapsed=`true`,leftSide=`true`


##### In the game world
> collapsed=`true`


###### e\.g\. Particles or arrows that highlight next waypoint

#### Meta
> leftSide=`true`


#### Non\-Diegetic
> collapsed=`true`,leftSide=`true`


##### Overlay UI
> collapsed=`true`


###### High Score Panel

### Canvas Types
> collapsed=`true`


#### Overlay
> collapsed=`true`


##### Screen space over

##### HUD
> leftSide=`true`


#### Camera
> collapsed=`true`,leftSide=`true`


##### Placed right before one Camera

#### World Space
> leftSide=`true`


### Build for different resolutions
> collapsed=`true`


#### platforms
> collapsed=`true`


##### consoles

##### pc
> leftSide=`true`


##### HTML5
> leftSide=`true`


##### mobile phone
> leftSide=`true`


#### Anchors
> collapsed=`true`


##### Can be nested\!

#### Groups
> collapsed=`true`


##### GridLayoutGroup component

##### Reminds me of CSS flexbox, kinda

#### Sorting
> collapsed=`true`


##### Sort Order property

#### Layers
> collapsed=`true`


##### Great for showing/hiding different UI

### TextMeshPro
> collapsed=`true`


#### Used to be in the asset store but is now installed via Unity Package Manager

### Event Trigger Component
> collapsed=`true`


#### Allows buttons \(and other components\!\) to have other triggers, like onHover or onDrag

### Inputs
> collapsed=`true`


#### Toggles

#### Sliders

#### Inputs

#### Dropdowns

#### Button
> collapsed=`true`


##### You can delete the background image if you still want the button functionality but just want to see the text

### Animations
> collapsed=`true`


#### Uses the same Animator component that I have used before in previous projects

#### Animation window brings up the timeline
> leftSide=`true`


#### VIDEO CLIPS CAN BE USED TO ANIMATE STATIC IMAGES\!
> collapsed=`true`


##### E\.g\. fire in a background image of a main menu\!

### Scroll views

## Saving Game Data
> collapsed=`true`


### ScriptableObject \(vs MonoBehavior\)

### PlayerPrefs is how to save/load data types

## Game Managers, Loaders, and the Game Loop
> collapsed=`true`,leftSide=`true`


### Game managers
> collapsed=`true`


#### Games are a collection of systems
> collapsed=`true`


##### Inventory

##### Player
> leftSide=`true`


##### Stats
> leftSide=`true`


#### Problematic if systems have direct communication

#### Game Systems can rely on Game Managers to centralize different game systems

#### Central location for data

#### Determines who can change what
> leftSide=`true`


#### Informs other systems of change
> leftSide=`true`


### Persistent Systems
> collapsed=`true`


#### Globally accessible and available throughout the runtime of the game

#### Scenes are large collections of assets

#### Prefabs are for small collections of assets

#### Technique used is to create a PERSISTENT SCENE that loads/unloads other scenes
> collapsed=`true`


##### E\.g\. Persistent Scene loads level 1

### Project Game Manager requirements
> collapsed=`true`


#### Tracks what level is being played

#### Knows the current state of the game

#### Can create other global managers

#### Can cleanup game systems
> collapsed=`true`


##### E\.g\. Save game on quit

##### E\.g\. Notify server of game status

### UI Manager

### The Game Loop
> collapsed=`true`


#### Code
> collapsed=`true`


##### Input

##### Update

##### Render

##### N frames per second \(e\.g\. 30 FPS, 60 FPS\)

#### Design
> collapsed=`true`,leftSide=`true`


##### Fight Enemies

##### Get Loot

##### Level Up

### The Game State
> collapsed=`true`


#### What mode is the game in?

#### How is the player interacting with the world?
> leftSide=`true`


#### Sword & Shovels game states
> collapsed=`true`


##### Pregame

##### Playing

##### Paused
