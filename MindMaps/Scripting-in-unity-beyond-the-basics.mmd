Mind Map generated by NB MindMap plugin
> __version__=`1.1`,showJumps=`true`
---

# C\# Scripting in Unity: Beyond the Basics

## Tips

### Consistency trumps style

#### conventions

### Code is written for people to read

### Think about logical groupings as paragraphs in an essay

### Make names descriptive and consistent

### Use easily readable names

### Avoid abbreviations

### Do not use underscores between words

### Namespaces are typically grouped by feature \(see Unity namespaces for examples\)

## Common Naming Conventions
> leftSide=`true`


### Pascal Case

#### The first letter of every word is capitalized

#### One word identifiers are always capitalized
> leftSide=`true`


### Camel Case

#### The first letter of the first word is lowercase

#### All subsequent words have the first letter capitalized
> leftSide=`true`


## Understanding Types
> leftSide=`true`


### Components of a Program

#### Data

##### Information to be processed & stored

#### Logic

##### Operations to be performed on data

### What can a type tell us?

#### The kind of data stored

#### Amount of memory required
> leftSide=`true`


#### The location in memory
> leftSide=`true`


### Types of types

#### Value types

##### Memory is allocated directly and inline on the stack

#### Reference types
> leftSide=`true`


##### Memory is allocated randomly on the managed heap

##### e\.g\. classes, delegates and interfaces

### Memory allocation by type

#### Stack

##### Value types

##### Pointers to reference types

#### Heap
> leftSide=`true`


##### Reference types

### Stack vs heap

#### Stack

##### Allocated when compiled

##### Data is stored sequentially

##### Variable size must be known

##### Not subject to garbage collection

##### Fast

#### Heap
> leftSide=`true`


##### Allocated during runtime

##### Data is stored randomly

##### Variable size can be unknown

##### May be garbage collected

##### Slow

### Anonymous type

#### e\.g\. var enemy = new \{ name = "Monster", health = 100 \}

### Generics

#### May replace method overloading

## Groups of Types

### Arrays

#### fixed length

#### more performant

### Generic lists

#### variable length

#### able to be sorted

### Dictionaries

#### key/value

### Queues and stacks

#### designed for transiant data

#### elements added are removed on use

#### Queue

##### First in, first out \(FIFO\)

##### Head, tail

##### dequeue removes from head

##### queue adds to tail

##### a runtime error is thrown if no elements are in queue when dequeue\(\) is called

#### Stacks

##### First in, last out \(FILO\)

##### elements are pushed to the top of the stack

##### elements are poped from the top of the stack

## Coroutines
> leftSide=`true`


### What are coroutines?

### What are they used for?

### I like to think of coroutines as todo lists that can sequentially execute

### Can delay execution

### Coroutines use scale time\. If you update Time\.scaleTime = 0, but want a coroutine to ignore that scale, use new WaitForSecondsRealtime\(\) instead of WaitForSeconds\(\)

### Parallel execution

#### Update runs once per frame, sequentially, before advancing to the next frame

#### Coroutines allow execution to happen over multiple frames

### Let you create time based behaviours

## OOP

### Model programs after objects

### A world of objects

#### properties

#### methods

#### relationships

#### interactions

### four pillars

#### encapsulation

##### grouping of data and methods into a cohesive object

#### abstraction

##### exposing only the features of an object necessary for interactions

#### inheritance

##### extend another object

#### polymorphism

### Interface defines a contract

## Delegates, events, and actions
> leftSide=`true`


### Delegates

#### Defined by their function signature

#### aka callbacks

### Events

#### notable things that happen in the program

#### Objects that produce events are called publishers

#### Objects taht consume events are called subscribers

### Actions

#### Actions are types in the system namespace that allow you to encapsulate methods without explicitly defining a delegate

## Execution order of unity event functions

### Awake

### OnEnable

#### Called when disabled object is enabled

### Start

#### Only called once

### Update

#### Called once per frame

### OnDisable

#### Called when enabled object is enabled

### OnDestroy
